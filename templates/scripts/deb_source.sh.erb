#!/usr/bin/env bash

set -ex

# configuration
project=<%= @product.dump %>
os=<%= @_os.dump %>
dist=<%= @_dist.dump %>
use_dist=<%= @_use.dump %>
release_type=<%= @release_type.dump %>
control_deb=<%= @control_deb.dump unless @control_deb.nil? %>
control_branch=<%= @control_branch.dump %>
upstream_branch=<%= @upstream_branch.dump %>

###
# please do not edit below
###

: ${BUILD_VERSION=1}
: ${BUILD_BRANCH:=''}
: ${BUILD_REF:=''}

# cleanup
rm -f *.version
rm -f *.tar* *.dsc *.deb *.changes
rm -rf "$project"

if [ -n "$control_deb" ]; then
  pkg_src=packaging
else
  pkg_src=packaging/${project}
  control_branch="deb/$control_branch"
fi

if [ -n "$BUILD_BRANCH" ]; then
  upstream_branch="$BUILD_BRANCH"
  UPSTREAM_GIT_BRANCH=origin/"$upstream_branch"

  if [ -n "$control_deb" ]; then
    test_branch="$upstream_branch"
  else
    test_branch="deb/$upstream_branch"
  fi

  # if this branch also exists in packaging XX
  if git --git-dir=packaging/.git/ rev-parse refs/remotes/packaging/"$test_branch" &>/dev/null; then
    control_branch="$test_branch"
  fi
elif [ -n "$BUILD_REF" ]; then
  upstream_branch="$BUILD_REF"
  UPSTREAM_GIT_BRANCH="$BUILD_REF"
else
  UPSTREAM_GIT_BRANCH=origin/"$upstream_branch"
fi

# ensure we checked out the packaging tree
cd packaging/
git clean -fxd
git checkout -B "$control_branch" packaging/"$control_branch"
GIT_PAGER=cat git show -s "$control_branch"
cd ../

# creating project directory
mkdir "$project"
cp -r ${pkg_src}/${use_dist}/debian "$project"/

# download archive
if [ "$release_type" == "release" ] ; then
	(cd "$project" && uscan --download-current-version --verbose)
else
  export UPSTREAM_GIT_BRANCH

  UPSTREAM_GIT_NOUPDATE=1 \
  UPSTREAM_GIT_NOREPO=1 \
  GIT_DIR=packaging/.git \
    ${pkg_src}/get_snapshot
fi

# figure out version
if [ "$release_type" == "release" ] ; then
	tarball=$(ls ${project}_*.orig.tar.*)

  debian_version=`dpkg-parsechangelog -l"${project}/debian/changelog" | egrep '^Version:' | cut -f 2- -d ' '`
	version=`echo "$debian_version" | cut -d- -f1`
	package_version="${debian_version}.${dist}"

	target_dist="icinga-${dist}"
else
  # snapshots
	version=`cat ${project}.version | cut -f1`
	git_commit=`cat ${project}.version | cut -f2`
	tarball=`cat ${project}.version | cut -f3`

	build_suffix=".`date +%Y.%m.%d`+$BUILD_VERSION.${dist}"
	package_version="${version}${build_suffix}-0"

  target_dist="icinga-${dist}-${release_type}"
  if [ "${release_type}" = snapshots ]; then
    target_dist="${target_dist}s" # snapshots
  fi

	# link tarball as unique version
	tarball_name="${tarball%.orig.tar*}"
	tarball_suffix="${tarball:${#tarball_name}}"
	versioned_tarball="${tarball_name}${build_suffix}${tarball_suffix}"
	ln -s "$tarball" "$versioned_tarball"
fi

# extracting source into package source tree
tar xf "${tarball}" --strip 1 -C "$project"/

# build source debian package
cd "$project"
export DEBFULLNAME="Icinga Build System"
export DEBEMAIL="info@icinga.com"

if [ "$release_type" = "release" ] ; then
	dch --force-bad-version --newversion="$package_version" --distribution="$target_dist" -- \
		"Debian/Ubuntu package for $target_dist" < /dev/null
else
	dch --force-bad-version --newversion="$package_version" --distribution="$target_dist" -- \
		"Snapshot build for version ${version}" \
		"based on GIT commit ${git_commit}" \
		"WARNING: this build is intended for testing and experimental usage and" \
		"should not be used in a production environment!" < /dev/null
fi

dpkg-buildpackage -S -uc -us -nc -d
