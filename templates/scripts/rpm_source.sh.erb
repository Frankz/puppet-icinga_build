#!/usr/bin/env bash

# configuration
project=<%= @product.dump %>
os=<%= @_os.dump %>
dist=<%= @_dist.dump %>
release_type=<%= @release_type.dump %>
control_branch=<%= @control_branch.dump %>
upstream_branch=<%= @upstream_branch.dump %>

###
# please do not edit below
###

set -ex

: ${BUILD_VERSION:=1}
: ${WORKDIR:=`pwd`}

<%= scope.function_template(['icinga_build/scripts/rpm_functions.sh.erb']) %>

# ensure we checked out the packaging tree
cd packaging/
git clean -fxd
git checkout -B rpm/"$control_branch" packaging/rpm/"$control_branch"
cd ../

#this must not fail TODO: Something better, dirty hack
cp -v packaging/${project}/* rpmbuild/SOURCES/ || true
mv -v rpmbuild/SOURCES/*.spec rpmbuild/SPECS/

# download archive
if [ "$release_type" == "release" ] ; then
  # TODO: Move to images!
  if [ "$os" = "centos" ]; then
	  sudo yum update -y
	  sudo yum install -y rpmdevtools
  elif [ "$os" = sles ]; then
    suse_version=$(echo "$dist" | sed 's/\./_SP/')
    suse_repository=devel:tools
    suse_repository_path="$suse_repository"
    if [ "$suse_version" = 11_SP4 ]; then
      suse_repository="home:lazyfrosch:devel:tools"
      suse_repository_path="home:/lazyfrosch:/devel:/tools"
    fi

    sudo zypper addrepo http://download.opensuse.org/repositories/"$suse_repository_path"/SLE_"$suse_version"/"$suse_repository".repo
    sudo zypper --gpg-auto-import-keys --non-interactive --no-gpg-checks install spectool
  elif [ "$os" = opensuse ]; then
    sudo zypper addrepo http://download.opensuse.org/repositories/devel:tools/openSUSE_Leap_"$dist"/devel:tools.repo
    sudo zypper --gpg-auto-import-keys --non-interactive --no-gpg-checks install spectool
  fi

	spectool -g rpmbuild/SPECS/*.spec
	mv *.tar.gz rpmbuild/SOURCES
else
  UPSTREAM_GIT_BRANCH=origin/"$upstream_branch" \
  UPSTREAM_GIT_NOUPDATE=1 \
  UPSTREAM_GIT_NOREPO=1 \
  GIT_DIR=packaging/.git \
    packaging/${project}/get_snapshot

	version=`cat ${project}.version | cut -f1`
	revision="0.`date +%Y.%m.%d`+$BUILD_VERSION"
	git_commit=`cat ${project}.version | cut -f2`
	tarball=`cat ${project}.version | cut -f3`

	# Update spec file
	sed -i \
	  -e "0,/^Version: /{s/Version: .*/Version: ${version}/}" \
	  -e "0,/^Release: /{s/Release: .*/Release: ${revision}%{?dist}/}" \
	  -e "0,/^Source0\?: /{s/\(Source0\?\): .*/Source0: ${tarball}/}" \
	   "rpmbuild/SPECS/${project}.spec"

	cp -vl "${tarball}" rpmbuild/SOURCES/
fi

cd rpmbuild/

rpmbuild --nodeps -bs "SPECS/${project}.spec"

# TODO: when a package is already releases this might be problems in test
# (he could test the package in repository)
rpm -qp --queryformat "%{VERSION}-%{RELEASE}" "SRPMS/${project}"*".src.rpm" \
  >../"${project}-package.version"

rpmlint --info --verbose "SPECS/${project}.spec" || true
